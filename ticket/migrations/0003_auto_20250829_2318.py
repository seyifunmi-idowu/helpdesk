# Generated by Django 4.2.5 on 2025-08-29 23:18

from django.db import migrations
from django.utils import timezone

def populate_workflow_data(apps, schema_editor):
    Workflow = apps.get_model('ticket', 'Workflow')
    WorkflowEvent = apps.get_model('ticket', 'WorkflowEvent')

    workflows_data = [
        {
            "id": 1,
            "name": "Customer Created",
            "description": "Send customer a welcome email after their account has been created.",
            "conditions": {},
            "actions": [{'type': 'uvdesk.customer.mail_customer', 'value': '8'}],
            "status": True,
            "is_predefind": True,
        },
        {
            "id": 2,
            "name": "Agent Created",
            "description": "Send agent a welcome email when their account is created.",
            "conditions": {},
            "actions": [{'type': 'uvdesk.agent.mail_agent', 'value': '4'}],
            "status": True,
            "is_predefind": True,
        },
        {
            "id": 3,
            "name": "User Forgot Password",
            "description": "Send an email to user with a link to reset their password.",
            "conditions": {},
            "actions": [{'type': 'uvdesk.user.mail_user', 'value': '1'}],
            "status": True,
            "is_predefind": True,
        },
        {
            "id": 4,
            "name": "Ticket Agent Update - Mail to Agent",
            "description": "Send an email to updated agent on ticket",
            "conditions": {},
            "actions": [{'type': 'uvdesk.ticket.mail_agent', 'value': {'for': ['assignedAgent'], 'value': '5'}}],
            "status": True,
            "is_predefind": True,
        },
        {
            "id": 5,
            "name": "Ticket Created",
            "description": "Automate actions when ticket is created.",
            "conditions": {},
            "actions": [
                {'type': 'uvdesk.ticket.mail_customer', 'value': '7'},
                {'type': 'uvdesk.ticket.assign_agent', 'value': 'responsePerforming'},
                {'type': 'uvdesk.ticket.mail_agent', 'value': {'for': ['assignedAgent', '5'], 'value': '3'}}
            ],
            "status": True,
            "is_predefind": True,
        },
        {
            "id": 6,
            "name": "Agent Replied on Ticket",
            "description": "Send customer an email when reply is added on ticket.",
            "conditions": {},
            "actions": [{'type': 'uvdesk.ticket.mail_customer', 'value': '2'}],
            "status": True,
            "is_predefind": True,
        },
        {
            "id": 7,
            "name": "Customer Replied on Ticket",
            "description": "Send agent an email when reply is added on ticket.",
            "conditions": {},
            "actions": [{'type': 'uvdesk.ticket.mail_agent', 'value': {'for': ['assignedAgent'], 'value': '6'}}],
            "status": True,
            "is_predefind": True,
        },
        {
            "id": 8,
            "name": "Collaborator Replied on Ticket",
            "description": "Send agent & customer an email when reply is added on ticket.",
            "conditions": {},
            "actions": [
                {'type': 'uvdesk.ticket.assign_agent', 'value': 'responsePerforming'},
                {'type': 'uvdesk.ticket.mail_agent', 'value': {'for': ['assignedAgent'], 'value': '10'}},
                {'type': 'uvdesk.ticket.mail_customer', 'value': '11'}
            ],
            "status": True,
            "is_predefind": True,
        },
        {
            "id": 9,
            "name": "Collaborator Added to ticket",
            "description": "Send collaborator a welcome email after their account has been Added.",
            "conditions": {},
            "actions": [{'type': 'uvdesk.ticket.mail_last_collaborator', 'value': '9'}],
            "status": True,
            "is_predefind": True,
        },
    ]

    for data in workflows_data:
        Workflow.objects.create(
            id=data['id'],
            name=data['name'],
            description=data['description'],
            conditions=data['conditions'],
            actions=data['actions'],
            status=data['status'],
            is_predefind=data['is_predefind'],
        )

    workflow_events_data = [
        {"workflow_id": 1, "event": "uvdesk.customer.created"},
        {"workflow_id": 2, "event": "uvdesk.agent.created"},
        {"workflow_id": 3, "event": "uvdesk.user.forgot_password"},
        {"workflow_id": 4, "event": "uvdesk.ticket.agent_updated"},
        {"workflow_id": 5, "event": "uvdesk.ticket.created"},
        {"workflow_id": 6, "event": "uvdesk.ticket.agent_reply"},
        {"workflow_id": 7, "event": "uvdesk.ticket.customer_reply"},
        {"workflow_id": 8, "event": "uvdesk.ticket.collaborator_reply"},
        {"workflow_id": 9, "event": "uvdesk.ticket.collaborator_updated"},
    ]

    for data in workflow_events_data:
        workflow_instance = Workflow.objects.get(id=data['workflow_id'])
        WorkflowEvent.objects.create(
            workflow=workflow_instance,
            event=data['event'],
        )


class Migration(migrations.Migration):

    dependencies = [
        ('ticket', '0002_initial'),
    ]

    operations = [
        migrations.RunPython(populate_workflow_data),
    ]