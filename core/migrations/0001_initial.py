# Generated by Django 4.2.5 on 2025-08-27 14:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=191, null=True, unique=True)),
                ('proxyId', models.CharField(blank=True, max_length=191, null=True, unique=True)),
                ('firstName', models.CharField(max_length=191)),
                ('lastName', models.CharField(blank=True, max_length=191, null=True)),
                ('isEnabled', models.BooleanField(default=False)),
                ('verificationCode', models.CharField(blank=True, max_length=191, null=True, unique=True)),
                ('timezone', models.CharField(blank=True, max_length=191, null=True)),
                ('timeformat', models.CharField(blank=True, max_length=191, null=True)),
                ('lastOtpGeneratedAt', models.DateTimeField(blank=True, null=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'uv_user',
            },
        ),
        migrations.CreateModel(
            name='AdminSupportGroupThrough',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'uv_admin_support_groups',
            },
        ),
        migrations.CreateModel(
            name='LeadSupportTeamThrough',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'uv_lead_support_teams',
            },
        ),
        migrations.CreateModel(
            name='SupportGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=191)),
                ('description', models.TextField()),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('isActive', models.BooleanField(default=False)),
                ('userView', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Support Group',
                'verbose_name_plural': 'Support Groups',
                'db_table': 'uv_support_group',
            },
        ),
        migrations.CreateModel(
            name='SupportPrivilege',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=191)),
                ('description', models.TextField()),
                ('privileges', models.JSONField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Support Privilege',
                'verbose_name_plural': 'Support Privileges',
                'db_table': 'uv_support_privilege',
            },
        ),
        migrations.CreateModel(
            name='SupportRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=191, unique=True)),
                ('description', models.CharField(blank=True, max_length=191, null=True)),
            ],
            options={
                'verbose_name': 'Support Role',
                'verbose_name_plural': 'Support Roles',
                'db_table': 'uv_support_role',
            },
        ),
        migrations.CreateModel(
            name='SupportTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=191)),
                ('description', models.TextField()),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('isActive', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Support Team',
                'verbose_name_plural': 'Support Teams',
                'db_table': 'uv_support_team',
            },
        ),
        migrations.CreateModel(
            name='UserInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(max_length=191)),
                ('skypeId', models.CharField(blank=True, max_length=191, null=True)),
                ('contactNumber', models.CharField(blank=True, max_length=191, null=True)),
                ('designation', models.CharField(blank=True, max_length=191, null=True)),
                ('signature', models.TextField(blank=True, null=True)),
                ('profileImagePath', models.TextField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('isActive', models.BooleanField(default=False)),
                ('isVerified', models.BooleanField(default=False)),
                ('isStarred', models.BooleanField(default=False)),
                ('ticketAccessLevel', models.CharField(blank=True, max_length=32, null=True)),
                ('defaultFiltering', models.IntegerField(blank=True, null=True)),
                ('adminSupportGroups', models.ManyToManyField(related_name='admin_user_instances', through='core.AdminSupportGroupThrough', to='core.supportgroup')),
                ('leadSupportTeams', models.ManyToManyField(related_name='lead_user_instances', through='core.LeadSupportTeamThrough', to='core.supportteam')),
                ('supportGroups', models.ManyToManyField(related_name='user_instances_in_group', to='core.supportgroup')),
                ('supportPrivileges', models.ManyToManyField(related_name='user_instances_with_privilege', to='core.supportprivilege')),
                ('supportRole', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.supportrole')),
                ('supportTeams', models.ManyToManyField(related_name='user_instances_in_team', to='core.supportteam')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_instances', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Instance',
                'verbose_name_plural': 'User Instances',
                'db_table': 'uv_user_instance',
            },
        ),
        migrations.CreateModel(
            name='SupportGroupsTeamsThrough',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supportGroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.supportgroup')),
                ('supportTeam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.supportteam')),
            ],
            options={
                'db_table': 'uv_support_groups_teams',
                'unique_together': {('supportGroup', 'supportTeam')},
            },
        ),
        migrations.AddField(
            model_name='supportgroup',
            name='supportTeams',
            field=models.ManyToManyField(related_name='groups_with_team', through='core.SupportGroupsTeamsThrough', to='core.supportteam'),
        ),
        migrations.AddField(
            model_name='leadsupportteamthrough',
            name='supportTeam',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.supportteam'),
        ),
        migrations.AddField(
            model_name='leadsupportteamthrough',
            name='userInstance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.userinstance'),
        ),
        migrations.AddField(
            model_name='adminsupportgroupthrough',
            name='supportGroup',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.supportgroup'),
        ),
        migrations.AddField(
            model_name='adminsupportgroupthrough',
            name='userInstance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.userinstance'),
        ),
        migrations.AlterUniqueTogether(
            name='leadsupportteamthrough',
            unique_together={('userInstance', 'supportTeam')},
        ),
        migrations.AlterUniqueTogether(
            name='adminsupportgroupthrough',
            unique_together={('userInstance', 'supportGroup')},
        ),
    ]
